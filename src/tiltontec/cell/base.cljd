(ns tiltontec.cell.base
  (:require
    [tiltontec.util.base :as utb
     :refer [def-rmap-slots dp]]

    [tiltontec.util.core
     :refer [cl-find set-ify atom? err
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-setf]
     :as utc]))



;; --- the Cells beef -----------------------

(def +pulse+ (atom 0))

(defn pulse-now [] @+pulse+)

(defn cells-init []
  (reset! +pulse+ 0))

(def ^:dynamic *causation* '())
(def ^:dynamic *call-stack* nil)
(def ^:dynamic *depender*
  "*depender* let's us differentiate between the call stack and
and dependency. The problem with overloading *call-stack* with both roles
is that we miss cyclic reentrance when we use without-c-dependency in a
rule to get once behavior or just when fm-traversing to find someone"
  nil)

(def ^:dynamic *defer-changes* false)
(def +client-q-handler+ (atom nil))

(defmacro with-mx-isolation [& body]
  `(binding [tiltontec.cell.base/*within-integrity* nil
             tiltontec.cell.base/*depender* nil
             tiltontec.cell.base/*defer-changes* false
             tiltontec.cell.base/*call-stack* nil]
     ~@body))

(def unbound (gensym "unbound-cell-value"))
(defn when-bound [x]
  (when (not= x unbound) x))

(def uncurrent (gensym "uncurrent-formulaic-value"))

(def ^:dynamic *not-to-be* false)
(def ^:dynamic *unfinished-business* nil)
(def ^:dynamic *within-integrity* false)

;; --- debug stuff -----------------------------
(def ^:dynamic *finbiz-id* 0)
(def ^:dynamic *c-prop-depth* 0)
(def ^:dynamic *cdbg* false)

(defn cprn [& bits]
  (when *cdbg*
    (apply prn bits)))

(defmacro with-cdbg [value & body]
  `(binding [*cdbg* ~value]
     ~@body))

(def +c-debug+ (atom false))
(def ^:dynamic +stop+ (atom false)) ;; emergency brake

(defmacro pcell [tag c]
  `(dp :pcell ~tag (c-slot ~c)(c-state ~c)))

;; --- procedure division ----------------------

(defn cells-reset
  ([] (cells-reset {}))
  ([options]
   (reset! +c-debug+ (:debug options false))
   (reset! +pulse+ 0)
   (reset! +client-q-handler+ (:client-queue-handler options))))

(defmacro without-c-dependency [& body]
  `(binding [*depender* nil]
     ~@body))

(defmacro cpr [& r]
  `(without-c-dependency
     (pln @+pulse+ ~@r)))

(defn +cause []
  (first *causation*))

;; --- 19000 ----------------------------------

(defn c-stopper [why]
  (reset! +stop+ why)) ;; in webserver, make sure each thread binds this freshly

(def +c-stopper+ (atom c-stopper))

(defn c-stop
  ([] (c-stop true))
  ([why]
   (@+c-stopper+ why)))

(defn c-stopped []
  @+stop+)

(defmacro un-stopped [& body]
  `(when-not @+stop+
     ~@body))

(defn ustack$ [tag] ;; debug aid
  (str tag "ustack> "(vec (map (fn [c] (:slot @c)) *call-stack*))))

(defn c-assert
  ([assertion] (when-not assertion
                 (dp #_ ut/err "c-assert anon failed")))
  ([assertion fmt$ & fmt-args]
   (when-not +stop+
     (when-not assertion
       (dp #_ ut/err (str "c-assert> " fmt$ fmt-args))))))

(defn c-break [& args]
  (when-not +stop+
    (dp #_ ut/err (str args))))

(defn c-warn [& args]
  (when-not +stop+
    (dp (apply str "WARNING: " args))))

;; ------------------------------------------------------

;(derive ::model ::object)
;(derive ::cell ::object)
;(derive ::c-formula ::cell)

(defprotocol PObserver
  (observe [this slot me new-value prior-value cell]))

(deftype MXImplementer [])

(deftype Model []
  :extends MXImplementer
  PObserver
  (observe [this slot me new-value prior-value cell]
    #_ (prn :Model-not-observing (cinfo cell))))

(defn mx-type [it]
  (when-let [m (meta it)]
    (:mx-type m)))

(deftype Cell []
  :extends MXImplementer)

(deftype CellFormula []
  :extends Cell)

(defn c-formula? [c]
  (dart/is? (mx-type c) CellFormula))

(defn c-ref? [c]
  (and c (atom? c) (map? @c)
    (dart/is? (mx-type c) Cell)))

(utb/def-rmap-slots c-
  me slot state input? rule pulse pulse-last-changed pulse-observed
  useds users callers optimize ephemeral?
  lazy synapses synaptic? code async? then? debug)

(defn c-code$ [c]
  (with-out-str (do ;; binding [*print-level* false]
                  (prn-str (:code @c)))))

(defn c-value [c]
  (assert (atom? c))
  (cond
    (and (c-ref? c)
      (map? @c)) (:value @c)
    :else @c))

(defn c-optimized-away? [c]
  (cond
    (c-ref? c) (or (not (map? @c))
                 (not (contains? @c :state)) ;; random property check?
                 (and (atom? c)
                   (:optimized-away (meta c)))
                 (= :optimized-away (:state @c)))
    (and (atom? c)
      (:optimized-away (meta c))) true
    :else true))

(defn c-model [rc]
  (:me @rc))

(defn c-md-name [c]
  (if-let [md (c-model c)]
    (or (:name @md)
      "anon")
    "no-md"))

(defn c-slot-name [rc]
  (:slot @rc))

(defn c-value-state [rc]
  (let [v (c-value rc)]
    (cond
      (= v unbound) :unbound
      (= v uncurrent) :uncurrent
      :else :valid)))

(defn c-unbound? [rc]
  (= :unbound (c-value-state rc)))

(defn c-valid? [rc]
  (= :valid (c-value-state rc)))

(defn cinfo
  ([c] (cinfo c false))
  ([c verbose?]
   (cond
    (nil? c) :null-c
    (not (atom? c)) (if verbose? [:not-atom-c c]
                                 :not-atom-c)
    (not (c-ref? c)) (if verbose? [:not-cell-c @c :meta (meta c)]
                       :not-cell-c)
    :else (if verbose? [:cinfo-all @c]
            ((juxt c-slot-name c-md-name c-async? c-value) c)))))

(defn minfo
  ([md]
   (minfo md false))
  ([md verbose]
   (cond
     (nil? md) :null-md
     (not (atom? md)) :not-atom-md
     (not (md-ref? md)) (do (dp :atom-not-md-c @md)
                            :atom-not-md-c)
     :else (if false ;; verbose
             [(:name @md) (meta md)]
             [:minfo :fxc (:fx-class @md)
              :mxtype (mx-type md)
              (or (:name @md)
                :anon #_ [:hunh @md])]))))

(defn dpc [c & bits]
  (assert (c-ref? c) (str "DPC got non-c: " c))
  (when (:debug @c)
    (apply dp :DPC (cinfo c) bits)))

;; --- dependency maintenance --------------------------------

(defn caller-ensure [used new-caller]
  ;; (trx :caller-ensure :used (c-slot used) (c-slot new-caller))
  (swap! used assoc :callers (conj (c-callers used) new-caller)))

(defn caller-drop [used caller]
  (swap! used assoc :callers (disj (c-callers used) caller)))

(defn unlink-from-callers [c]
  (for [caller (c-callers c)]
    (caller-drop c caller))
  (rmap-setf [:callers c] nil))

;; debug aids --------------

(defn c-slots [c k]
  (assert (c-ref? c) (str "cslots c-ref? fail " ))
  ;; set conversion as convenience to test code
  (set (map c-slot (k @c))))

;; --- defmodel rizing ---------------------

(defn md-ref? [x]
  ;;(trx :md-ref?-sees x)
  (and x (atom? x)
    (dart/is? (mx-type x) Model)))


;; --- mdead? ---

(defn mdead? [me]
  (if-let [m (meta me)]
    (= :dead (:state m))
    false))

;;---

;(set! *print-level* 3) ;; cells are recursive data for now

(defn md-slot-owning?
  "Signifies whether the given slot is a host or owning property, meaning
  its value should be GCed and navigation might want to go here."
  [class-name slot-name]
  ;; todo resurrect if needed, or clean up altogether
  false)

(defn c-debug [c tag])
