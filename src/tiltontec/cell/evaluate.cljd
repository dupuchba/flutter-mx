(ns tiltontec.cell.evaluate
  (:require
    [clojure.string :as str]
    [tiltontec.util.base :refer [wtrx dprn dp dpx trx prog1]]
    [tiltontec.util.core
     :refer [atom? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.base
     :refer [without-c-dependency pcell c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input? mx-type cprn c-code$
             c-model mdead? c-valid? c-useds c-ref? md-ref?
             c-state +pulse+ c-pulse-observed cinfo minfo
             *call-stack* *defer-changes*
             c-rule c-code c-me c-value-state c-callers caller-ensure
             unlink-from-callers *causation*
             c-synaptic? caller-drop c-md-name
             c-pulse c-pulse-last-changed c-ephemeral? c-then? c-slot c-slots c-slot-name
             *depender* *not-to-be*
             *c-prop-depth* md-slot-owning? c-lazy dpc c-async?] :as cty]
    [tiltontec.cell.observer :refer [c-observe]]
    [tiltontec.cell.integrity
     :refer [with-integrity *one-pulse?* c-current? c-pulse-update]]))

(defn ephemeral-reset [rc]
  (when (c-ephemeral? rc)                                   ;; allow call on any cell, catch here
    ;
    ; as of Cells3 we defer resetting ephemerals because everything
    ; else gets deferred and we cannot /really/ reset it until
    ; within finish_business we are sure all callers have been recalculated
    ; and all observers completed (which happens with recalc).
    ;
    (with-integrity (:ephemeral-reset rc)
      (when-let [me (:me @rc)]
        ;; presumption next is that model cells live in
        ;; their own internal slot of model FNYI
        (swap! me assoc (:slot @rc) nil))
      (swap! rc assoc :value nil))))

(defn record-dependency [used]
  (when-not (c-optimized-away? used)
    (assert *depender*)
    (assert (cty/c-ref? *depender*) (str/join " | "
                                      ["reco-dep sees non c-ref depender: " *depender*
                                       [:used (cinfo used)]
                                       (when (atom? *depender*) (deref *depender*))
                                       (when (and (atom? *depender*)
                                               (dart/is? @*depender* #/(Future dynamic)))
                                         [:future])]))

    (trx nil :reco-dep!!! :used (c-slot used) :caller (c-slot *depender*))
    (dpx :reco-dep-sees-dep @*depender*)
    (when (dart/is? @*depender* #/(Future dynamic))
      (dpx :reco-dep-future!!!!!!!!! (await @*depender*)))
    (rmap-setf [:useds *depender*]
      (conj (c-useds *depender*) used))
    (caller-ensure used *depender*)))

;; test

(defn ensure-value-is-current
  "The key to data integrity: recursively check the known dependency
  graph to decide if we are current, and if not kick off recalculation
  and propagation."

  [c debug-id ensurer]

  (cond
    ; --------------------------------------------------
    *not-to-be*                                             ; we got kicked off during not-to-be processing
    ; just return what we have if valid, else nil
    (cond
      (c-unbound? c)
      (do
        (err "evic> unbound slot %s of model %s"
          (c-slot c) (c-model c)))

      (c-valid? c)
      ;; c is valid, go ahead and return its value in case not-to-be can use it.
      (c-value c))


    ;; --- easy way out: our pulse is current ---------------
    (c-current? c)
    (c-value c)

    ;; --- also easy with an optimize edge case lost to history -------
    (and (c-input? c)
      (c-valid? c)                                          ;; a cFn (ruled-then-input) cell will not be valid at first
      (not (and (c-formula? c)
             (= (c-optimize c) :when-value-t)
             (nil? (c-value c)))))
    (c-value c)

    ;; --- above we had valid values so did not care. now... -------
    (when-let [md (c-model c)]
      (mdead? (c-model c)))

    (err (str/join " " ["evic> model: " (c-model c) "of cell" c "is dead"]))

    ;; --- no more early exits  -------------------
    (or (not (c-valid? c))
      (loop [[used & urest] (seq (c-useds c))]
        (when used
          ;;(pcell :cnset-evicing used)
          ;;(pcell :cnset-user c)
          (ensure-value-is-current used :nested c)
          ;; now see if it actually changed
          ;; (dp :pulse-checks (c-slot used)(c-pulse-last-changed used)(c-slot c)(c-pulse c))
          (or (> (c-pulse-last-changed used) (c-pulse c))
            (recur urest)))))
    (do
      ;; we seem to need update, but check that other processing did not bring c current
      (when-not (c-current? c)
        (dpx :not-current-so-calc!!!!!!! (c-slot c) (c-state c) (c-valid? c))
        ;; happens if dependent changed and its observer read/updated me
        (calculate-and-set c :evic ensurer))
      (c-value c))

    ;; we were behind the pulse but not affected by the changes that moved the pulse
    ;; record that we are current to avoid future checking:
    :else (do
            ;;(trx :just-pulse!!!!! (c-slot c))
            (c-pulse-update c :valid-uninfluenced)
            (c-value c))))

(defn c-get
  "The API for determing the value associated with a Cell.
  Ensures value is current, records any dependent, and
  notices if a standalone  cell has never been observed."

  [c]

  (cond
    (c-ref? c) (prog1
                 (with-integrity ()
                   (let [prior-value (c-value c)]
                     #_(dp :cget-to-evic (c-slot c) (mx-type (c-model c)))
                     #_(when (and *depender* (not= :kids (c-slot *depender*)))
                         (prn :c-get-sees-depender
                           (str "asker= "
                             (c-slot *depender*) "/"
                             (c-md-name *depender*))))
                     (prog1

                       (let [ev (ensure-value-is-current c :c-read nil)]
                         ;; (when (= (c-slot c) :title) (dp :evic ev))
                         ev)
                       ;; this is new here, intended to awaken standalone cells JIT
                       ;; /do/ might be better inside evic, or test here
                       ;; to see if c-model is nil? (trying latter...)
                       (when (and (nil? (c-model c))
                               (= (c-state c) :nascent)
                               (> @+pulse+ (c-pulse-observed c)))
                         (rmap-setf [:state c] :awake)
                         (c-observe c prior-value :cget)
                         (ephemeral-reset c)))))
                 (when *depender*
                   (dpx :c-get-depender!! (cinfo *depender*))
                   (dpx :c-get-depender!! (meta *depender*))
                   #_(when (and *depender* (not= :kids (c-slot *depender*)))
                       (prn :c-get-records-dependency
                         :askee (c-slot c) (mx-type (c-model c))
                         (str "asker= "
                           (c-slot *depender*) "/"
                           (c-md-name *depender*))))
                   (when-not (cty/c-optimized-away? *depender*)
                     (dpx :c-get-reco-dependency (cinfo c) @c (meta c))
                     (record-dependency c)
                     (dpx :c-get-reco-dependency-cool (cinfo c)))))
    (atom? c) @c
    :else c))

(defn cget [c]
  (c-get c))

(defn calculate-and-set
  "Calculate, link, record, and propagate."
  [c dbgid dbgdata]
  (do                                                       ;; cty/with-cdbg (and (= :style (c-slot c)) (= :z-counter (c-md-name c)))
    ;; (wtrx [0 20 :cnset-entry (c-slot c)]
    (dpx :--------------------- 42)
    (dpx c :calcnset-sees!!!!!!!!!!!!!!!!!!! dbgid dbgdata @c)
    (dpx :--------------------- 43)
    (let [[raw-value propagation-code] (calculate-and-link c)]
      ;;(trx :cn-set-sees!!!! (c-slot c) raw-value propagation-code)
      (dpc c :calcnset-raw!!! raw-value :fut? (dart/is? raw-value Future) :opti? (c-optimized-away? c)
        #_#_:meta-mw (meta (c-me c)))

      (cond
        (c-async? c) (do
                       (assert (or (nil? raw-value)         ;; someday support other default future cell values, mebbe :pending
                                 (dart/is? raw-value Future))
                         (str "cnset-future got non future: " raw-value dbgid dbgdata))

                       (if (dart/is? raw-value Future)
                         (do
                           ;; (dp :got-future :defchg cty/*defer-changes* :wii cty/*within-integrity*)
                           (.then ^Future raw-value
                             (fn [fu-val]
                               ;(dp :then-callback-sees :defchg cty/*defer-changes* :wii cty/*within-integrity*)
                               (with-integrity [:change :future-then]
                                 ;; todo if a cfu is meant to run repeatedly as dependencies change,
                                 ;;      do we need to clear :then? Or is opti-away not a problem
                                 ;;      since it would have happened were there no users??
                                 (rmap-meta-setf [:then? c] true)
                                 (c-value-assume c (if-let [and-then (:and-then? @c)]
                                                     (and-then c fu-val) fu-val) nil))))
                           ;; forcing nil pending future
                           ;; TODO support :pending-future-placeholder-value and force that instead
                           (c-value-assume c nil propagation-code))
                         (c-value-assume c nil propagation-code)))
        :else (when-not (c-optimized-away? c)
                (assert (map? (deref c)) "calc-n-set")
                ;; this check for optimized-away? arose because a rule using without-c-dependency
                ;; can be re-entered unnoticed since that "clears" *call-stack*. If re-entered, a subsequent
                ;; re-exit will be of an optimized away cell, which will have been value-assumed
                ;; as part of the opti-away processing.
                ;;(trx :calc-n-set->assume raw-value)
                (c-value-assume c raw-value propagation-code)
                (when-not (or (map? (deref c))
                            (c-optimized-away? c))
                  (dp :c-NO_LONGER-map!!!!!!!!!-meta (meta c))
                  (dp :c-NO_LONGER-map!!!!!!!!! (deref c) (when (atom? (deref c))
                                                            (deref (deref c))))
                  (assert (or (map? (deref c))
                            (c-optimized-away? c)) "calc-n-set deref c not map or opti"))
                )))))

(defn calculate-and-link
  "The name is accurate: we do no more than invoke the
  rule of a formula and return its value*, but along the
  way the links between dependencies and dependents get
  determined anew.

  * Well, we also look to see if a synaptic cell has attached a
  propagation code to a vector used to wrap the raw value, which we then unpack."
  [c]
  (assert (cty/c-ref? c) (str "calcnlink passed non-cell " c (when (atom? c) (deref c))))

  ;; first check for cycles
  (when (some #{c} *call-stack*)
    (let [me (c-model c)
          slot (c-slot-name c)]
      (err str
        "MXAPI_COMPUTE_CYCLE_DETECTED> cyclic dependency detected while computing slot '"
        slot "' of model '" (c-md-name c) "'.\n"
        "...> formula for " slot ":\n"
        (c-code$ c)
        "\n...> full cell: \n"
        @c
        "\n\n...> callstack, latest first: \n"
        (str/join "\n" (mapv (fn [cd]
                               (str "....> md-name:" (c-md-name cd) " slot: " (c-slot-name cd)
                                 "\n....>    code:" (c-code$ cd)))
                         *call-stack*)))))

  (do                                                       ;; wtrx (0 100 nil "calc-n-link" c (cty/cinfo c))
    (binding [*depender* c
              *call-stack* (cons c *call-stack*)
              *defer-changes* true]
      (unlink-from-used c :pre-rule-clear)
      (assert (c-rule c) (str "No rule in %s type %s" (:slot c) (mx-type c)))

      (dpx c :CNL-trying-formula (cinfo c))
      (let [raw-value #_((c-rule c) c)
            (try
              ((c-rule c) c)
              (catch Exception e
                (dprn :exception e)
                (dprn :error-calculating-formula (c-code c))
                (dprn :error-calculating-cinfo (cinfo c))
                (dprn :error-calculating-minfo (minfo (c-model c)))
                (dprn :ex-data (ex-data e))
                ;   (dprn :ex-message (ex-message e))
                ;  (dprn :ex-cause (ex-cause e))
                (dprn :rule-calc-caught e)
                (throw e)))
            prop-code? (and (c-synaptic? c)
                         (vector? raw-value)
                         (contains? (meta raw-value) :propagate))]
        (dpc c :cn-link-got raw-value prop-code?)
        (if prop-code?
          [(first raw-value) (:propagate (meta raw-value))]
          [raw-value nil])))))

;;; --- awakening ------------------------------------

(defn c-awaken [c]
  (try
    (cond
      (c-formula? c)
      (cond
        (some #{(c-lazy c)} [:until-asked])
        (dp :c-awakening-NOT-lazy (cinfo c))

        :else (binding [*depender* nil]
                (when (not (= (c-state c) :awake))
                  (dpx :c-awakening!!!!! (c-state c) (c-pulse c) @+pulse+ (dissoc @c :code))
                  (calculate-and-set c :fn-c-awken nil))))

      (c-ref? c)
      (do
        (assert (c-input? c))
        (when (> @+pulse+ (c-pulse-observed c))             ;; safeguard against double-call
          (when-let [me (c-me c)]
            (rmap-setf [(c-slot c) me] (c-value c)))
          (c-observe c :cell-awaken)
          (ephemeral-reset c)))

      (coll? c)
      ;; a test function does this for standalones
      (doseq [ce c]
        (c-awaken ce))

      :else
      (dp :c-awaken-fall-thru (if (atom? c)
                                [:ref-of (meta c) @c]
                                [:unref c])))
    (catch Exception e
      (dprn :error-calculating-cinfo (cinfo c))
      (dprn :c-awaken-exception e)

      (dprn :error-calculating-formula (c-code c))

      (dprn :error-calculating-minfo (minfo (c-model c)))
      (dprn :ex-data (ex-data e))
      (throw e))))

;; ------------------------------------------------------------

(defn md-slot-value-store [me slot value]
  (assert me)
  (assert (atom? me))
  ;(trx :mdsv-store slot (flz value))
  (rmap-setf [slot me] value))

(defn c-value-assume
  "The Cell assumes a new value at awakening, on c-reset!, or
   after formula recalculation.

  We record the new value, set the Cell state to :awake, make
  its pulse current, check to see if a formula cell can be
  optimized away, and then propagate to any dependent formula
  cells."

  [c new-value propagation-code]

  (assert (c-ref? c) (str "c-ref? fail " (cinfo c true)))
  (dpc c :cvass-entry!! (c-slot c) new-value)
  (do                                                       ;; (wtrx (0 100 :cv-ass (:slot @c) new-value)
    (prog1 new-value                                        ;; sans doubt
      (without-c-dependency
        (let [prior-value (c-value c)
              prior-state (c-value-state c)
              prior-c (deref c)]

          ;; --- cell maintenance ---
          ;; new for 4/19/2016: even if no news at
          ;; least honor the reset!
          ;;
          (rmap-setf [:value c] new-value)
          (rmap-setf [:state c] :awake)
          ;; (cty/dpc c :now-awake!!!!!!!!! (dissoc @c :code))
          (dpc c :cvass-value-installed!!
            new-value (cinfo c))
          ;;
          ;; --- model maintenance ---
          (when (and (c-model c)
                  (not (c-synaptic? c)))
            (md-slot-value-store (c-model c) (c-slot c) new-value))
          ;;(trx :val-stored new-value)
          (c-pulse-update c :slotv-assume)
          (dpx :maybe-propping (c-slot c) new-value
            :priorstate prior-state
            :propcode propagation-code
            :changed? (c-value-changed? c new-value prior-value))
          (when (or (not (some #{prior-state} [:valid :uncurrent]))
                  (= propagation-code true)                 ;; forcing
                  (when-not (= propagation-code false)
                    (c-value-changed? c new-value prior-value)))
            ;;
            ;; --- something happened ---
            ;;
            ;; we may be overridden by a :no-propagate below, but anyway
            ;; we now can look to see if we can be optimized away
            (dpx :maybe-propping-sth-happened)
            (let [callers (c-callers c)]                    ;; get a copy before we might optimize away
              (dpc c :cvass-pre-opti-check (c-formula? c) (c-optimize c))
              (when-let [optimize (and (c-formula? c)
                                    (c-optimize c))]
                (dpc c :cvass-opti-truthy!!! optimize (deref c) #_#_:priorc prior-c)

                (if (= optimize :when-value-t)
                  (when (c-value c)
                    (trx nil :when-value-t (c-slot c))
                    (unlink-from-used c :when-value-t))
                  (when (= optimize true)
                    (optimize-away?! c prior-value))))

              ;; --- data flow propagation -----------

              (when-not (or (= propagation-code :no-propagate)
                          (c-optimized-away? c))
                (assert (map? @c))
                #_(dp :value-assume-propping!!!! (c-slot c) :new new-value :prior prior-value
                    :to-caller-ct (count callers))
                (propagate c prior-value callers)))))))))


;; --- unlinking ----------------------------------------------
(defn unlink-from-used [c why]
  "Tell dependencies they need not notify us when they change,
then clear our record of them."
  (for [used (c-useds c)]
    (do
      (rmap-setf [:callers used] (disj (c-callers used) c))))

  (rmap-setf [:useds c] #{}))

(defn md-cell-flush [c]
  (assert (c-ref? c) (str "c-ref? fail on md-cell-flush" c))
  (when-let [me (c-model c)]
    (rmap-setf [:cells-flushed me]
      (conj (:cells-flushed me)
        [(c-slot c) (c-pulse-observed c)]))))

;; --- optimize away ------------------------------------------
;; optimizing away cells who turn out not to depend on anyone
;; saves a lot of work at runtime.


(defn optimize-away?!
  "Optimizes away cells who turn out not to depend on anyone,
  saving a lot of work at runtime. A caller/user will not bother
  establishing a link, and when we get to models cget will
  find a non-cell in a slot and Just Use It."

  [c prior-value]
  (assert (c-ref? c) "optiway-c-not-c-ref")

  (dpc c :opti-away-check (c-useds c) (c-optimize c) (c-valid? c) (not (c-input? c)))

  (when (and (c-formula? c)
          (not (and (c-async? c)
                 (not (c-then? c))))                        ;; todo test also if the then has been received
          (empty? (c-useds c))
          (c-optimize c)
          (not (c-optimized-away? c))                       ;; c-streams (FNYI) may come this way repeatedly even if optimized away
          (c-valid? c)                                      ;; /// when would this not be the case? and who cares?
          (not (c-synaptic? c))                             ;; no slot to cache invariant result, so they have to stay around)
          (not (c-input? c)))                               ;; yes, dependent cells can be inputp

    (dpc c :optimizing-away!!!! (c-slot c) (c-md-name c) :user-ct (count (c-callers c)))

    (rmap-setf [:state c] :optimized-away)                  ;; leaving this for now, but we toss the cell below.
    (rmap-meta-setf [:optimized-away c] (deref cty/+pulse+))
    (c-observe c prior-value :opti-away)

    (when-let [me (c-model c)]
      ;; (when (= :login (:name @me))   (dp :opti-away-nails-cz!!!!!!!!!! (c-slot c)))
      (rmap-meta-setf [:cz me] (assoc (:cz (meta me)) (c-slot c) nil))
      (md-cell-flush c))

    ;; let callers know they need not check us for currency again
    (doseq [caller (seq (c-callers c))]
      (swap! caller assoc :useds (remove #{c} (c-useds caller)))
      (caller-drop c caller)
      ;;; (trc "nested opti" c caller)
      ;;(optimize-away?! caller) ;; rare but it happens when rule says (or .cache ...)
      (ensure-value-is-current caller :opti-used c))        ;; this will get round to optimizing
    ; them if necessary, and if not they do need
    ; to have one last notification if this was
    ; a rare mid-life optimization
    (reset! c (c-value c))
    ))

;; --- c-quiesce -----------

(defn c-quiesce [c]
  (assert c)
  (unlink-from-callers c)
  (unlink-from-used c :quiesce)
  (reset! c :dead-c))

;; --- not-to-be --

(defn not-to-be-self [me]
  (doseq [c (vals (:cz (meta me)))]
    (when c                                                 ;; not if optimized away
      (c-quiesce c)))
  (reset! me nil)
  (rmap-meta-setf [:state me] :dead))

(defn not-to-be [me]
  ;; todo check existing n2b usages
  ;; todo this means we have to ensure that :not-to-be is just a function, not a cell
  (when-let [n2b (get @me :not-to-be)]
    (n2b me))
  (not-to-be-self me))

;----------------- change detection ---------------------------------

(defn c-value-changed? [c new-value old-value]
  (not ((or (:unchanged-if @c)
          =)
        new-value old-value)))

;;--------------- change propagation  ----------------------------

(def ^:dynamic *custom-propagater* nil)

(defn propagate
  "A cell:
  - notifies its callers of its change;
  - calls any observer; and
  - if ephemeral, silently reverts to nil."

  ;; /do/ support other values besides nil as the "resting" value

  [c prior-value callers]

  ;; (trx :propagate (:slot @c))

  (cond
    *one-pulse?* (when *custom-propagater*
                   (*custom-propagater* c prior-value))
    ;; ----------------------------------
    :else
    (do
      ;;(dp :upd-pulse-last-chg-to @+pulse+ c)
      (rmap-setf [:pulse-last-changed c] @+pulse+)

      (binding [*depender* nil
                *call-stack* nil
                *c-prop-depth* (inc *c-prop-depth*)
                *defer-changes* true]
        ;; --- manifest new value as needed ---
        ;;
        ;; 20061030 Trying not.to.be first because doomed instances may be interested in callers
        ;; who will decide to propagate. If a family instance kids slot is changing, a doomed kid
        ;; will be out of the kids but not yet quiesced. If the propagation to this rule asks the kid
        ;; to look at its siblings (say a view instance being deleted from a stack who looks to the psib
        ;; pb to decide its own pt), the doomed kid will still have a parent but not be in its kids slot
        ;; when it goes looking for a sibling relative to its position.
        (when (and prior-value
                (c-model c)
                (md-slot-owning? (mx-type (c-model c)) (c-slot c)))
          (when-let [ownees (difference (set-ify prior-value) (set-ify (c-value c)))]
            (doseq [ownee ownees]
              (not-to-be ownee))))

        (propagate-to-callers c callers)
        ;;(trx :watch-chkpulse!!!!!!!! @+pulse+ (c-pulse-observed c))

        (when-not (c-optimized-away? c)                     ;; they get observed at the time
          #_(dp :not-opti-decide-obs!!!! (c-slot-name c) :obspulse (c-pulse-observed c) :pulse @+pulse+)
          (when (or (> @+pulse+ (c-pulse-observed c))
                  (some #{(c-lazy c)}
                    [:once-asked :always true]))            ;; messy: these can get setfed/propagated twice in one pulse+
            ;; (dp :observing-unobserved-or-lazy!! (c-slot c) (c-value c))
            (c-observe c prior-value :propagate)))

        ;;
        ;; with propagation done, ephemerals can be reset. we also do this in c-awaken, so
        ;; let the fn decide if C really is ephemeral. Note that it might be possible to leave
        ;; this out and use the pulse to identify obsolete ephemerals and clear them
        ;; when read. That would avoid ever making again bug I had in which I had the reset
        ;; inside slot-value-observe,
        ;; thinking that that always followed propagation to callers. It would also make
        ;; debugging easier in that I could find the last ephemeral value in the inspector.
        ;; would this be bad for persistent CLOS, in which a DB would think there was still a link
        ;; between two records until the value actually got cleared?
        ;;
        (ephemeral-reset c)))))

(defn propagate-to-callers [c callers]
  ;;
  ;;  We must defer propagation to callers because of an edge case in which:
  ;;    - X tells A to recalculate
  ;;    - A asks B for its current value
  ;;    - B must recalculate because it too uses X
  ;;    - if B propagates to its callers after recalculating instead of deferring it
  ;;       - B might tell H to reclaculate, where H decides this time to use A
  ;;       - but A is in the midst of recalculating, and cannot complete until B returns.
  ;;         but B is busy eagerly propagating. "This time" is important because it means
  ;;         there is no way one can reliably be sure H will not ask for A
  ;;
  (when-not (empty? callers)
    (let [causation (cons c *causation*)]                   ;; closed over below
      (with-integrity (:tell-dependents c)
        (if (mdead? (c-model c))
          (do (trx "WHOAA!!!! dead by time :tell-deps dispatched; bailing" c))
          (binding [*causation* causation]
            (doseq [caller (seq callers)]
              (cond
                (or                                         ;; lotsa reasons NOT to proceed
                  (= (c-state caller) :quiesced)
                  (c-current? caller)                       ;; happens if I changed when caller used me in current pulse+
                  (some #{(c-lazy caller)} [true :always :once-asked])

                  (and (not (some #{c} (c-useds caller)))   ; hard to follow, but it is trying to say
                    (not (c-optimized-away? c))))           ; "go ahead and notify caller one more time
                ; even if I have been optimized away cuz they need to know."
                ; Note this is why callers must be supplied, having been copied
                ; before the optimization step.
                (do #_(trx :not-propping @+pulse+ (c-slot c)
                        ;; :val (c-value c)
                        :to (c-slot caller) :caller         ;; @caller
                        (c-state caller) :current (c-current? caller)
                        :c-not-used? (not (some #{c} (c-useds caller)))
                        :c-not-opti (not (c-optimized-away? c))))

                :else
                (calculate-and-set caller :propagate c)))))))))
