(ns tiltontec.model.base
  (:require
    [tiltontec.util.base
     :refer [trx wtrx dprn dp dpx prog1 *trx?* def-rmap-slots def-rmap-meta-slots]]
    [tiltontec.util.core :refer [err rmap-setf rmap-meta-setf]]
    [tiltontec.cell.base
     :refer [without-c-dependency cells-init c-optimized-away? c-formula? c-value c-optimize
             c-unbound? c-input? mx-type observe
             c-model mdead? c-valid? c-useds c-ref? md-ref?
             c-state +pulse+ c-pulse-observed c-assert
             *call-stack* *defer-changes* unbound
             c-rule c-me c-value-state c-callers caller-ensure
             unlink-from-callers *causation* c-md-name
             c-synaptic? caller-drop
             c-pulse c-pulse-last-changed c-ephemeral? c-slot c-slots
             *depender* *not-to-be*
             *c-prop-depth* md-slot-owning? c-lazy] :as cty]

    [tiltontec.cell.integrity :refer [with-integrity]]

    [tiltontec.cell.core
     :refer [cF cF+ c-reset-next! cFonce cFn cI c-reset! make-cell]]

    [tiltontec.cell.evaluate :refer [c-get c-awaken]]
    ))

(def ^:dynamic *md-host*
  "used for navigation above `me` for delegate MX nodes with no parent, such as an appBar"
  nil)

(def-rmap-slots md-
  name)

(def-rmap-meta-slots md-
  state cz)

(defn md-cell [me slot]
  (slot (:cz (meta me))))

;;; --- md initialization ---

(defn md-install-cell [me slot c]
  ;; note that c might not be a Cell; it is a misnomer
  (cond
    (c-ref? c) (do
                 (swap! c assoc
                   :slot slot
                   :me me)
                 (rmap-setf [slot me]
                   (when (c-input? c)
                     (c-value c)))
                 true)
    :else (do
            (rmap-setf [slot me] c)
            false)))

(defn md-awaken
  "(1) do initial evaluation of all ruled slots
   (2) call observers of all slots"
  [me]
  (assert me "md-awaken is nil")
  (dpx :md-awaken-me!! (cty/minfo me))
  ;(prn :md-awaken-meta!! (meta me))
  ;(prn :md-awaken-deref!! (deref me))

  (assert (= :nascent (md-state me)))
  (rmap-meta-setf [:state me] :awakening)
  (binding [*md-host* me]
    (doall
      (for [slot (keys @me)]
        ;; next is tricky: if slot is in :cz but nil, it has been
        ;; optimized-away and observed then in the rare case
        ;; it gets optimized away on other than the initial
        ;; value.
        (when-let [c (slot (md-cz me) :not-found)]
          (cond
            (= c :not-found)
            ;; these need at least an initial observe
            (when (not (some #{slot} [:parent :name :fx-gen :not-to-be]))
              (observe (mx-type me) slot me (slot @me) unbound nil))
            :else (when-not (= (c-state c) :awake)          ;; might have happened already
                    (c-awaken c)))))))
  (rmap-meta-setf [:state me] :awake)
  me)
